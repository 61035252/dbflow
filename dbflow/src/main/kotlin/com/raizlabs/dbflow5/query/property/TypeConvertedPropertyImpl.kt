package com.raizlabs.dbflow5.query.property

import com.raizlabs.dbflow5.converter.TypeConverter
import com.raizlabs.dbflow5.query.NameAlias
import kotlin.reflect.KClass

import com.raizlabs.dbflow5.query.property.TypeConverterGetter as InternalTypeConverterGetter

/**
 * Description:
 */
actual open class TypeConvertedProperty<T, V> : InternalTypeConvertedProperty<T, V> {

    actual constructor(table: KClass<*>, nameAlias: NameAlias,
                       convertToDB: Boolean,
                       getter: InternalTypeConverterGetter) : super(table, nameAlias, convertToDB, getter)

    actual constructor(table: KClass<*>, columnName: String,
                       convertToDB: Boolean,
                       getter: InternalTypeConverterGetter) : super(table, columnName, convertToDB, getter)

    constructor(table: Class<*>, nameAlias: NameAlias,
                convertToDB: Boolean,
                getter: TypeConverterGetter) : super(table.kotlin, nameAlias, convertToDB, { getter.getTypeConverter(it.java) })

    constructor(table: Class<*>, columnName: String,
                convertToDB: Boolean,
                getter: TypeConverterGetter) : super(table.kotlin, columnName, convertToDB, { getter.getTypeConverter(it.java) })

    /**
     * Generated by the compiler, looks up the type converter based on [ModelAdapter] when needed.
     * This is so we can properly retrieve the type converter at any time.
     */
    interface TypeConverterGetter {

        fun getTypeConverter(modelClass: Class<*>): TypeConverter<*, *>
    }

}